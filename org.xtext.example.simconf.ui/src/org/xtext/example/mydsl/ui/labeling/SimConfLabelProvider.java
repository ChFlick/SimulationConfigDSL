/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.ui.labeling;

import java.util.stream.Collectors;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.xtext.example.mydsl.domainmodel.Config;
import org.xtext.example.mydsl.domainmodel.Domainmodel;
import org.xtext.example.mydsl.domainmodel.Input;
import org.xtext.example.mydsl.domainmodel.List;
import org.xtext.example.mydsl.domainmodel.Output;
import org.xtext.example.mydsl.domainmodel.Report;
import org.xtext.example.mydsl.domainmodel.Routing;
import org.xtext.example.mydsl.domainmodel.Time;

import com.google.inject.Inject;

/**
 * Provides labels for EObjects.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class SimConfLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public SimConfLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	@Override
	protected Object doGetText(Object element) {
		Object text = super.doGetText(element);

		if (text == null) {
			return element.getClass().getSimpleName();
		}

		return text;
	}

	// Labels and icons can be computed like this:
	String text(Input input) {
		return "input";
	}

	String text(Output output) {
		return "output";
	}

	String text(Time time) {
		return "time";
	}

	String text(Routing routing) {
		return "routing";
	}

	String text(Report report) {
		return "report";
	}

	String text(Domainmodel domainmodel) {
		return "Simulator configuration";
	}

	String text(Config config) {
		return config.getName().getLiteral();
	}

	String text(List list) {
		return "List: [\"" + list.getList().stream().collect(Collectors.joining("\", \"")) + "\"]";
	}
}
